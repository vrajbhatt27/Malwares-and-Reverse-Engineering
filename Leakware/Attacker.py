import socket

class Server:
    def __init__(self):
        self.s = None
        self.start()
        self.con = None
        self.addr = None

    def start(self):
        try:
            self.s = socket.socket()
            self.s.bind(('', 9999))
            print("Binding successful")
            self.s.listen(3)
            print("Listening...")

        except socket.error as err:
            print("Binding Error: ", str(err))

    def accept_con(self):
        self.con, self.addr = self.s.accept()
        print("Connection Established with ip: ",self.addr[0]," Port: ",self.addr[1])

    def send_data(self, data):
        if isinstance(data, bytes):
            pass
        else:
            data = data.encode()

        self.con.sendall(data)

    def recv_data(self):
        data = self.con.recv(1024)
        return data

    def close_all(self):
        self.s.close()
        self.con.close()
        print("Server: Connection Closed")

serv = Server()
serv.accept_con()

msg = (serv.recv_data()).decode()

if msg == 'READY':
    print(msg)
    serv.send_data('SEND')

name = None
size = None
total_data = None
chunk = []
flag = False

while True:
    data = serv.recv_data()

    if data[:3] == b'#?#':
        data = data.decode()
        data = data[3:]
        name, size = data.split('|')
        size = int(size)
        serv.send_data('OK')
        print('-- sent ok ----')

        total_data = 0
        chunk = []
        flag = True

        continue

    if flag == True:

        #print('writing: ', name)
        total_data = total_data + len(data)
        #print(total_data)
        chunk.append(data)
        if total_data >= size:
            #print('In total_data')
            content = b''.join(chunk)
            with open(name, "wb") as f:
                f.write(content)

            print("File received successfully: ",name)
            flag = False
            data = None
















